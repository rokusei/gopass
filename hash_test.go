package gopass

import (
	"bytes"
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/require"
)

func Test_generateEncryptionKeyAuthenticationHash(t *testing.T) {
	testCases := []struct {
		name           string
		masterPassword string
		salt           []byte
		ekhExpected    string
		ahExpected     string
	}{
		{
			name:           "test a",
			masterPassword: "password1",
			salt:           []byte("autogenerated"),
			ekhExpected:    "318a078fca060a5f205253460b60858513a9cb71ded16622ed7ea255dc53ffe9a2a9812a9c5cd3347b5029b04bac1ed567d973a19c885168adaa9a1b06687b57",
			ahExpected:     "c3c87b4a72e510f418f26b205bf4c061016178ef914dc0ba840b55faafaedc3f9f30a1ac1161a2048c9188abb1abc8ff5160620e2092aa6301533c8a2d64802f",
		},
	}
	for _, test := range testCases {
		ekActual := generateEncryptionKey(test.masterPassword, test.salt)
		ekh := hex.EncodeToString(ekActual)
		require.Equal(t, test.ekhExpected, ekh, test.name)

		aActual, err := generateAuthenticationHash(ekActual, test.salt)
		ah := hex.EncodeToString(aActual)
		require.NoError(t, err)
		require.Equal(t, test.ahExpected, ah, test.name)
	}
}

func Test_GenerateAuthEncHashes(t *testing.T) {
	tests := 4
	ahs := make([][]byte, tests)
	ehs := make([][]byte, tests)
	salts := make([][]byte, tests)
	for i := 0; i < tests; i++ {
		mp := "test"
		ah, eh, salt, err := GenerateAuthEncHashes(mp)
		require.NoError(t, err)
		require.Len(t, ah, 64)
		require.Len(t, eh, 64)
		require.GreaterOrEqual(t, bytes.Count(salt, []byte("-")), 3)
		t.Logf("Master Password: %s\nEncryptedKey: %s\nAuthenticationHash: %s\nSalt: %s\nSalt QR:\n%s", mp, hex.EncodeToString(eh), hex.EncodeToString(ah), salt, SaltQR(salt))
	}
	for i := 0; i < tests; i++ {
		for j := i + 1; j < tests; j++ {
			require.NotEqual(t, ahs[i], ahs[j])
			require.NotEqual(t, ehs[i], ehs[j])
			require.NotEqual(t, salts[i], salts[j])
		}
	}
}
